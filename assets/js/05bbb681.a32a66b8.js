"use strict";(self.webpackChunkrailsconf_2023=self.webpackChunkrailsconf_2023||[]).push([[108],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>k});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=p(a),d=n,k=c["".concat(s,".").concat(d)]||c[d]||u[d]||l;return a?r.createElement(k,o(o({ref:t},m),{},{components:a})):r.createElement(k,o({ref:t},m))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:n,o[1]=i;for(var p=2;p<l;p++)o[p]=a[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5408:(e,t,a)=>{a.d(t,{Z:()=>l});var r=a(7294);const n={card:"card_vceO",image:"image_EDOu",description:"description_Vdg7",position:"position_CmtU"};function l(e){let{imageUrl:t,name:a,position:l}=e;return r.createElement("div",{className:n.card},r.createElement("img",{src:t,className:n.image}),r.createElement("div",{className:n.description},r.createElement("p",null,a),r.createElement("p",{className:n.position},l)))}},5254:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var r=a(7462),n=(a(7294),a(3905)),l=a(5408);const o={sidebar_position:3},i="The Math Every Programmer Needs",s={unversionedId:"day-one/math",id:"day-one/math",title:"The Math Every Programmer Needs",description:"<Speaker",source:"@site/docs/day-one/math.mdx",sourceDirName:"day-one",slug:"/day-one/math",permalink:"/docs/day-one/math",draft:!1,editUrl:"https://github.com/Jeremy-Walton/railsconf2023/tree/main/packages/create-docusaurus/templates/shared/docs/day-one/math.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"The End of Legacy Code",permalink:"/docs/day-one/legacy-code"},next:{title:"ActiveRecord::Encryption; Stop Hackers from Reading your Data",permalink:"/docs/day-one/encryption"}},p={},m=[{value:"Attendees",id:"attendees",level:2},{value:"Notes",id:"notes",level:2}],c={toc:m},u="wrapper";function d(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"the-math-every-programmer-needs"},"The Math Every Programmer Needs"),(0,n.kt)(l.Z,{name:"Jo\xebl Quenneville",position:"Principal Developer at thoughtbot",imageUrl:"https://sessionize.com/image/7bc9-400o400o2-WVvfdFvH3gTweWkfEQCd21.jpg",mdxType:"Speaker"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://railsconf2023.sessionize.com/session/453592"},"Schedule Entry")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://speakerdeck.com/joelq/the-math-every-programmer-needs"},"Slides")),(0,n.kt)("h2",{id:"attendees"},"Attendees"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Josh"),(0,n.kt)("li",{parentName:"ul"},"Gary")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Relvancy"),(0,n.kt)("th",{parentName:"tr",align:null},"Interesting"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"4"),(0,n.kt)("td",{parentName:"tr",align:null},"5")))),(0,n.kt)("h2",{id:"notes"},"Notes"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Discrete Math - most useful CS skillset for the rails devs"),(0,n.kt)("li",{parentName:"ul"},"Proposition Logic, Boolean Algebra, Graph Theory, etc."),(0,n.kt)("li",{parentName:"ul"},"Practical Problems",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Unnecessary Conditions => Use Operators!",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Boolean Algebra focus on Operators"),(0,n.kt)("li",{parentName:"ul"},"Identity, negation, adm, or"))),(0,n.kt)("li",{parentName:"ul"},"Propositional Logic Truth Tables",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"2 expressions are equal if their truth tables match"),(0,n.kt)("li",{parentName:"ul"},"Can use tables in GH PR markdown"),(0,n.kt)("li",{parentName:"ul"},"Makes complex code easier to understand and communicate"))),(0,n.kt)("li",{parentName:"ul"},"Broken Auth Logic => Demorgans Law on negation of compound conditions",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"More readable code"),(0,n.kt)("li",{parentName:"ul"},"Catch bugs"),(0,n.kt)("li",{parentName:"ul"},"Unless is a boolean condition"))),(0,n.kt)("li",{parentName:"ul"},"How many test cases do I need?  => Combinatorics",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"2 inputs + # states per input"),(0,n.kt)("li",{parentName:"ul"},"Compound states multiply!"),(0,n.kt)("li",{parentName:"ul"},"2 states x 3 states = 6 tests!"),(0,n.kt)("li",{parentName:"ul"},"Default optional parameters (combinatorics)"),(0,n.kt)("li",{parentName:"ul"},"Insufficient test coverage => Venn diagrams (tests vs states)"),(0,n.kt)("li",{parentName:"ul"},"Add more tests or reduce states (maybe your code is trying to do too much)"))),(0,n.kt)("li",{parentName:"ul"},"Which RSpec let blocks actually get invoked? => Graph Theory",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Visual model. List lets."),(0,n.kt)("li",{parentName:"ul"},"Add directed relations for dependency / references between them"),(0,n.kt)("li",{parentName:"ul"},"= Dependency Graph"),(0,n.kt)("li",{parentName:"ul"},"Color those being used"),(0,n.kt)("li",{parentName:"ul"},"Can improve performance by simply / optimize dependency between them"))),(0,n.kt)("li",{parentName:"ul"},"Work incrementally => Graph Theory",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Large Task -> Linear List (steps 1 to 5)"),(0,n.kt)("li",{parentName:"ul"},"Graph Theory - evaluating a node requires evaluating all downstream nodes"),(0,n.kt)("li",{parentName:"ul"},"Alternatively, work on leaf nodes. Can be done in isolation. Can be shipped!"),(0,n.kt)("li",{parentName:"ul"},"Dependency Graphs should be evaluated from the bottom up (terminal nodes first)"),(0,n.kt)("li",{parentName:"ul"},"Aka Topological sort"),(0,n.kt)("li",{parentName:"ul"},"Concrete example: Replace image processing gem. Cycles!"),(0,n.kt)("li",{parentName:"ul"},"Cycles cannot be evaluated independently"),(0,n.kt)("li",{parentName:"ul"},"Breaking cycles via new dependency on adapter to create DAG"),(0,n.kt)("li",{parentName:"ul"},"This is the strangler fig pattern"))),(0,n.kt)("li",{parentName:"ul"},"What are the risks of a randomly generated ID collision? => Combinatorics"),(0,n.kt)("li",{parentName:"ul"},"Designing a DB schema => Set Theory + Combinatorics")))))}d.isMDXComponent=!0}}]);