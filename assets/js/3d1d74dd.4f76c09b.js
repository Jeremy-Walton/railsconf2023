"use strict";(self.webpackChunkrailsconf_2023=self.webpackChunkrailsconf_2023||[]).push([[575],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>k});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(a),d=n,k=m["".concat(s,".").concat(d)]||m[d]||c[d]||l;return a?r.createElement(k,i(i({ref:t},u),{},{components:a})):r.createElement(k,i({ref:t},u))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:n,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5408:(e,t,a)=>{a.d(t,{Z:()=>l});var r=a(7294);const n={card:"card_vceO",image:"image_EDOu",description:"description_Vdg7",position:"position_CmtU"};function l(e){let{imageUrl:t,name:a,position:l}=e;return r.createElement("div",{className:n.card},r.createElement("img",{src:t,className:n.image}),r.createElement("div",{className:n.description},r.createElement("p",null,a),r.createElement("p",{className:n.position},l)))}},8600:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=a(7462),n=(a(7294),a(3905)),l=a(5408);const i={sidebar_position:8},o="A custom design pattern for building dynamic ActiveRecord queries",s={unversionedId:"day-two/queries",id:"day-two/queries",title:"A custom design pattern for building dynamic ActiveRecord queries",description:"The pain is familiar to long-time developers of enterprise Rails applications. Database queries through ActiveRecord are an essential part of our application. And making these queries performant, dynamic, and readable is hard.",source:"@site/docs/day-two/queries.mdx",sourceDirName:"day-two",slug:"/day-two/queries",permalink:"/railsconf2023/docs/day-two/queries",draft:!1,editUrl:"https://github.com/Jeremy-Walton/railsconf2023/tree/main/docs/day-two/queries.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"talksSidebar",previous:{title:"Teaching Capybara Testing - An Illustrated Adventure",permalink:"/railsconf2023/docs/day-two/capybara"},next:{title:"Building an offline experience with a Rails-powered PWA",permalink:"/railsconf2023/docs/day-two/pwa"}},p={},u=[{value:"Attendees",id:"attendees",level:2},{value:"Notes",id:"notes",level:2}],m={toc:u},c="wrapper";function d(e){let{components:t,...a}=e;return(0,n.kt)(c,(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"a-custom-design-pattern-for-building-dynamic-activerecord-queries"},"A custom design pattern for building dynamic ActiveRecord queries"),(0,n.kt)("p",null,"The pain is familiar to long-time developers of enterprise Rails applications. Database queries through ActiveRecord are an essential part of our application. And making these queries performant, dynamic, and readable is hard."),(0,n.kt)(l.Z,{name:"Justin Daniel",position:"Software Engineer with G2",imageUrl:"https://sessionize.com/image/97c9-400o400o2-MKkFVK1VvvDFy7KAueKMsY.png",mdxType:"Speaker"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://railsconf2023.sessionize.com/session/453527"},"Schedule Entry")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://docs.google.com/presentation/d/1o2icW9yPl0MYtFhojs_BOjXohOvQqg5Z4ABI9gAL9nI/edit#slide=id.p"},"Slides")),(0,n.kt)("h2",{id:"attendees"},"Attendees"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Kyle"),(0,n.kt)("li",{parentName:"ul"},"Reed"),(0,n.kt)("li",{parentName:"ul"},"Gary")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Relevancy"),(0,n.kt)("th",{parentName:"tr",align:null},"Interesting"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"8"),(0,n.kt)("td",{parentName:"tr",align:null},"9")))),(0,n.kt)("h2",{id:"notes"},"Notes"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Big Picture:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Surface Data in Many Systems"),(0,n.kt)("li",{parentName:"ul"},"Filterable, Customizable"),(0,n.kt)("li",{parentName:"ul"},"Fast, Agile innovation"))),(0,n.kt)("li",{parentName:"ul"},"Acceptance Criteria",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Composable"),(0,n.kt)("li",{parentName:"ul"},"Maintainable"),(0,n.kt)("li",{parentName:"ul"},"Performant"))),(0,n.kt)("li",{parentName:"ul"},"Composable",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Legos"),(0,n.kt)("li",{parentName:"ul"},"Modular: shaped from smaller interchangeable parts"),(0,n.kt)("li",{parentName:"ul"},"Respond to logic & conditionals"),(0,n.kt)("li",{parentName:"ul"},"Return desired fields that might vary by filters selected"))),(0,n.kt)("li",{parentName:"ul"},"How to avoid messy composable queries?"),(0,n.kt)("li",{parentName:"ul"},"OO programming for queries!"),(0,n.kt)("li",{parentName:"ul"},"Alternatives?",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Raw SQL / Contacts",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Most performant"),(0,n.kt)("li",{parentName:"ul"},"Limited only by RDBMS"),(0,n.kt)("li",{parentName:"ul"},"No dependencies"),(0,n.kt)("li",{parentName:"ul"},"Poor readability"),(0,n.kt)("li",{parentName:"ul"},"Less maintainable"),(0,n.kt)("li",{parentName:"ul"},"Less composable"),(0,n.kt)("li",{parentName:"ul"},"Less linter help"))),(0,n.kt)("li",{parentName:"ul"},"Vanilla Active Record",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Composable"),(0,n.kt)("li",{parentName:"ul"},"More readable"),(0,n.kt)("li",{parentName:"ul"},"Some complexity"),(0,n.kt)("li",{parentName:"ul"},"No conditional branching"))),(0,n.kt)("li",{parentName:"ul"},"Arel Tables",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Deals with complex queries & branching"),(0,n.kt)("li",{parentName:"ul"},"Relational algebra is difficult to read"),(0,n.kt)("li",{parentName:"ul"},"Cannot express multiple concerns in a single node (higher level business logic)"))),(0,n.kt)("li",{parentName:"ul"},"Custom design pattern w/ AR",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Highly composable"),(0,n.kt)("li",{parentName:"ul"},"Conditional branching support"),(0,n.kt)("li",{parentName:"ul"},"OO"),(0,n.kt)("li",{parentName:"ul"},"No complex library needed\u2026 you can take it & run"))),(0,n.kt)("li",{parentName:"ul"},"Query Builder + Visitor Pattern (called \u201cBuilder\u201d pattern)",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Wraps AR"),(0,n.kt)("li",{parentName:"ul"},"Query classes + Builders + Nodes"),(0,n.kt)("li",{parentName:"ul"},"Initial state"))),(0,n.kt)("li",{parentName:"ul"},"Visitor pattern to delegate active record query to each node to continue to build up the state"),(0,n.kt)("li",{parentName:"ul"},"Reduce accumulates nodes and eliminates unnecessary ones via AR.merge(clause) over & over"),(0,n.kt)("li",{parentName:"ul"},"Eg query.merge(Campaign.where(title: title)) if names.present?"),(0,n.kt)("li",{parentName:"ul"},"Give the builder the nodes and let the nodes eliminates themselves"),(0,n.kt)("li",{parentName:"ul"},"A node can contain other nodes",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"or/and where clauses"),(0,n.kt)("li",{parentName:"ul"},"CTE"),(0,n.kt)("li",{parentName:"ul"},"Subqueries"),(0,n.kt)("li",{parentName:"ul"},"Higher business logic"))),(0,n.kt)("li",{parentName:"ul"},"Legendary characters (Veteran and Buff)"),(0,n.kt)("li",{parentName:"ul"},"Nesting of nodes",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Wheres operator with operator (and/or)"))),(0,n.kt)("li",{parentName:"ul"},"Best Practices",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Encapsulate public interface of your query in a class",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"1 query class per API endpoint (eg IndexQuery)"))),(0,n.kt)("li",{parentName:"ul"},"Make it modular",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Compose it of named classes that represent nodes"))),(0,n.kt)("li",{parentName:"ul"},"Delegate to builders and nodes",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Move the bulk of you rlogic outside of the query class"))),(0,n.kt)("li",{parentName:"ul"},"Make a builder that uses the visitor pattern",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Use a builder abstraction separate from your query class"),(0,n.kt)("li",{parentName:"ul"},"Query class should read descriptively"))))),(0,n.kt)("li",{parentName:"ul"},"Abstraction Frees our Code to Tell a Story")))))}d.isMDXComponent=!0}}]);